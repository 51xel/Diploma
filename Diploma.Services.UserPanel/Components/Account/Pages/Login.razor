@page "/login"

@inject ISender Mediator
@inject ILogger<Login> Logger
@inject AccountHelper AccountHelper
@inject NavigationManager NavigationManager
@inject ILoadingIndicatorService ApplicationLoadingIndicatorService

<PageTitle>Log in</PageTitle>

<h1>Log in w3daBuw5</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" Enhance="true">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <Microsoft.AspNetCore.Components.Forms.ValidationSummary class="text-danger" role="alert" />

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="mb-3 text-center">
                    <span class="text-danger">@errorMessage</span>
                </div>
                <div>
                    <Button Color="Color.Primary" Block Type="ButtonType.Submit">Log In</Button>
                </div>

                <div class="mt-3 text-center">
                    <Text>Don't have an account? <Link To="/register">Register here</Link></Text>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string? errorMessage;

    public async Task LoginUser()
    {
        var command = new AuthenticateWithEmailAndPasswordCommand(Input.Email, Input.Password);

        var result = await Mediator.Send(command);

        if (result.IsError)
        {
            var error = result.ErrorsOrEmptyList.FirstOrDefault();
            errorMessage = error.Description;

            if (string.IsNullOrEmpty(errorMessage))
            {
                errorMessage = "Something unexpected happend";

                Logger.LogError($"Error while email and password authentication for {Input.Email}. Password {Input.Password}");
            }
        }
        else
        {
            await  AccountHelper.SignInUserAsync(result.Value);
            NavigationManager.NavigateTo("/");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [StringLength(255, ErrorMessage = "Email must not exceed 255 characters.")]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters long.")]
        [MaxLength(20, ErrorMessage = "Password must not exceed 20 characters.")]
        public string Password { get; set; } = string.Empty;
    }
}
