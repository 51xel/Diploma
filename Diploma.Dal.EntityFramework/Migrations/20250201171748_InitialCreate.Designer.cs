// <auto-generated />
using System;
using Diploma.Dal.EntityFramework.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Diploma.Dal.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250201171748_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Diploma.Domain.Algorithms.Algorithm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("algorithm", (string)null);
                });

            modelBuilder.Entity("Diploma.Domain.Models.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("model", (string)null);
                });

            modelBuilder.Entity("algorithm_model", b =>
                {
                    b.Property<Guid>("algorithmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("modelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("algorithmId", "modelId");

                    b.HasIndex("modelId");

                    b.ToTable("algorithm_model");
                });

            modelBuilder.Entity("Diploma.Domain.Models.Model", b =>
                {
                    b.OwnsOne("Diploma.Domain.Models.TrainingTimeRange", "TrainingTime", b1 =>
                        {
                            b1.Property<Guid>("ModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("From")
                                .HasColumnType("datetime2")
                                .HasColumnName("from");

                            b1.Property<DateTime>("To")
                                .HasColumnType("datetime2")
                                .HasColumnName("to");

                            b1.Property<int>("Type")
                                .HasColumnType("int")
                                .HasColumnName("timeRange");

                            b1.HasKey("ModelId");

                            b1.ToTable("model");

                            b1.WithOwner()
                                .HasForeignKey("ModelId");
                        });

                    b.Navigation("TrainingTime")
                        .IsRequired();
                });

            modelBuilder.Entity("algorithm_model", b =>
                {
                    b.HasOne("Diploma.Domain.Algorithms.Algorithm", null)
                        .WithMany()
                        .HasForeignKey("algorithmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diploma.Domain.Models.Model", null)
                        .WithMany()
                        .HasForeignKey("modelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
